basePath: /api/v1
definitions:
  models.SoftwareRequest:
    properties:
      id:
        type: string
      labID:
        type: string
      requestedAt:
        type: string
      software:
        type: string
      status:
        type: string
      userID:
        type: string
    type: object
  models.User:
    properties:
      id:
        type: string
      name:
        type: string
      password:
        type: string
      user_type:
        type: integer
    type: object
  req.CreateBooking:
    properties:
      end_time:
        type: string
      lab_id:
        type: string
      period:
        type: string
      start_time:
        type: string
      user_id:
        type: string
    required:
    - end_time
    - lab_id
    - period
    - start_time
    - user_id
    type: object
  req.CreateLabRequest:
    properties:
      acessible:
        type: boolean
      local:
        type: string
      name:
        type: string
      pcNumbers:
        type: integer
      softwares:
        items:
          type: string
        type: array
      status:
        type: string
    type: object
  req.CreateRecurringBookingRequest:
    properties:
      count:
        description: Number of bookings to create
        type: integer
      daysOfWeek:
        description: Days of the week (0 = Sunday, 6 = Saturday)
        items:
          type: integer
        type: array
      end_time:
        description: End time in ISO 8601 format
        type: string
      lab_id:
        description: Lab ID
        type: string
      period:
        description: Booking period
        type: string
      start_time:
        description: Start time in ISO 8601 format
        type: string
      user_id:
        description: User ID
        type: string
    type: object
  req.CreateSoftwareRequest:
    properties:
      name:
        type: string
    type: object
  req.CreateUserRequest:
    properties:
      name:
        type: string
      password:
        type: string
      user_type:
        type: integer
    required:
    - name
    - password
    type: object
  res.BookingResponse:
    properties:
      daysOfWeek:
        description: Days of the week (0 = Sunday, 6 = Saturday)
        items:
          type: integer
        type: array
      end_time:
        description: End time in ISO 8601 format
        type: string
      id:
        description: Booking ID
        type: string
      lab_id:
        description: Lab ID
        type: string
      period:
        description: Booking period
        type: string
      start_time:
        description: Start time in ISO 8601 format
        type: string
      user_id:
        description: User ID
        type: string
    type: object
  res.CreateLabResponse:
    properties:
      acessible:
        type: boolean
      id:
        type: string
      local:
        type: string
      name:
        type: string
      pcNumbers:
        type: integer
      softwares:
        items:
          type: string
        type: array
      status:
        type: string
    type: object
  res.CreateRecurringBookingResponse:
    properties:
      daysOfWeek:
        description: Days of the week (0 = Sunday, 6 = Saturday)
        items:
          type: integer
        type: array
      end_time:
        description: End time in ISO 8601 format
        type: string
      id:
        description: Booking ID
        type: string
      lab_id:
        description: Lab ID
        type: string
      period:
        description: Booking period
        type: string
      start_time:
        description: Start time in ISO 8601 format
        type: string
      user_id:
        description: User ID
        type: string
    type: object
  rest_err.Causes:
    properties:
      field:
        type: string
      message:
        type: string
    type: object
  rest_err.RestErr:
    properties:
      causes:
        items:
          $ref: '#/definitions/rest_err.Causes'
        type: array
      error:
        type: string
      message:
        type: string
      status:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for a lab manager.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Lab Manager API
  version: "1.0"
paths:
  /api/v1/bookings/{id}:
    delete:
      consumes:
      - application/json
      description: Cancel a booking
      parameters:
      - description: Booking ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Cancel a booking
      tags:
      - bookings
  /api/v1/bookings/create:
    post:
      consumes:
      - application/json
      description: Create a new booking
      parameters:
      - description: Booking object that needs to be created
        in: body
        name: booking
        required: true
        schema:
          $ref: '#/definitions/req.CreateBooking'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/res.BookingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Create a new booking
      tags:
      - bookings
  /api/v1/bookings/recurring:
    post:
      consumes:
      - application/json
      description: Create recurring bookings
      parameters:
      - description: Recurring booking object that needs to be created
        in: body
        name: booking
        required: true
        schema:
          $ref: '#/definitions/req.CreateRecurringBookingRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/res.CreateRecurringBookingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Create recurring bookings
      tags:
      - bookings
  /api/v1/labs:
    get:
      consumes:
      - application/json
      description: Fetches a list of all labs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/res.CreateLabResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Retrieve all labs
      tags:
      - labs
  /api/v1/labs/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a specific lab by ID
      parameters:
      - description: Lab ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Delete a lab
      tags:
      - labs
    get:
      consumes:
      - application/json
      description: Fetches a lab by its unique identifier
      parameters:
      - description: Lab ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CreateLabResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Retrieve a lab by ID
      tags:
      - labs
    put:
      consumes:
      - application/json
      description: Updates the details of a specific lab by ID
      parameters:
      - description: Lab ID
        in: path
        name: id
        required: true
        type: string
      - description: Lab object with updated details
        in: body
        name: lab
        required: true
        schema:
          $ref: '#/definitions/req.CreateLabRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.CreateLabResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest_err.RestErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Update an existing lab
      tags:
      - labs
  /api/v1/labs/create:
    post:
      consumes:
      - application/json
      description: Create a new lab
      parameters:
      - description: Lab object that needs to be created
        in: body
        name: lab
        required: true
        schema:
          $ref: '#/definitions/req.CreateLabRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/res.CreateLabResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Create a new lab
      tags:
      - labs
  /api/v1/software_requests/create:
    post:
      consumes:
      - application/json
      description: Create a new software request
      parameters:
      - description: Software request object that needs to be created
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/req.CreateSoftwareRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SoftwareRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Create a new software request
      tags:
      - software_requests
  /api/v1/users/create:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User object that needs to be created
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/req.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest_err.RestErr'
      summary: Create a new user
      tags:
      - users
swagger: "2.0"
